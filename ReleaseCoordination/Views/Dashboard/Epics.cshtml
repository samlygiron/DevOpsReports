@{
    ViewData["Title"] = "Epics";
}

<script>
    const releaseReportURl = `https://dev.azure.com/${organizationName}/${projectName}/_apis/wit/wiql/3d242c72-f33b-4f46-afad-3803158337e8/?api-version=6.0`;
    
    const isWidget = ('@ViewBag.IsWidget' === 'True');
    const type = [];
    type["Bug"] = { icon: "bug", className: "cBug" };
    type["Task"] = { icon: "sticky-note", className: "cTask" };
    type["UserStory"] = { icon: "leanpub", className: "cUserStory" };
    type["Feature"] = { icon: "trophy", className: "cFeature" };
    type["Ticket"] = { icon: "fa-ticket", className: "cUserStory" };
    type["Epic"] = { icon: "star", className: "cEpic" };

    const badge = [];
    badge["completed"] = "success";
    badge["active"] = "warning";

    let $table;
    let lstTable;

    let lstDevTeam;
    let lstQATeam;
    //let lstSATeam;

    let lstCols = [
        { title: "Id", data: "Id" },
        { title: "Type", data: "Type", className: "dt-center", responsivePriority: 10001 },
        { title: "Request", data: "Request", defaultContent: ""},
        { title: "Project number", data: "Project", defaultContent: ""},
        { title: "HLOE", data: "HLOE", defaultContent: ""},
        { title: "PM", data: "PM", defaultContent: "", responsivePriority: 10001},
        { title: "SA", data: "SA", defaultContent: "", responsivePriority: 10001},
        { title: "DEV", data: "Dev", defaultContent: "", responsivePriority: 10001},
        { title: "QA", data: "QA", defaultContent: "", responsivePriority: 10001},
        { title: "Project phase", data: "State", defaultContent: ""},
        { title: "Planned release", data: "TargetedReleaseDate", defaultContent: "", render: function (value) { return formatDate(value); }},
        { title: "Project summary", data: "Description", defaultContent: "", responsivePriority: 10001 },
        { title: "Analysis end", data: "SAEnd", defaultContent: "", render: function (value) { return value ===  '' ? '' : formatDate(value); } },
        { title: "Analysis start", data: "SAStart", defaultContent: "", render: function (value) { return value ===  '' ? '' : formatDate(value); } },
        { title: "Dev CPLT", data: "DevCPLT", defaultContent: "" },
        { title: "Dev end", data: "DevEnd", defaultContent: "", render: function (value) { return value ===  '' ? '' : formatDate(value); } },
        { title: "Dev LOE", data: "DevLOE", defaultContent: "" },
        { title: "Dev start", data: "DevStart", defaultContent: "", render: function (value) { return value ===  '' ? '' : formatDate(value); } },
        { title: "Project healt", data: "ProjectHealt", defaultContent: "" },
        { title: "Project name", data: "Title", defaultContent: "", responsivePriority: 1 },
        { title: "QA CPLT", data: "QACPLT", defaultContent: "" },
        { title: "QA end", data: "QAEnd", defaultContent: "", render: function (value) { return value ===  '' ? '' : formatDate(value); } },
        { title: "QA LOE", data: "QALOE", defaultContent: "" },
        { title: "QA start", data: "QAStart", defaultContent: "", render: function (value) { return value ===  '' ? '' : formatDate(value); } },
        { title: "SA CPLT", data: "SACPLT", defaultContent: "" },
        { title: "SA LOE", data: "SALoe", defaultContent: "" },
        { title: "ViaOne product", data: "ViaOneProduct", defaultContent: "" },
        { title: "Request status", data: "RequestStatus", defaultContent: "" },
        { title: "Road to green", data: "RoadTogreen", defaultContent: "" },

        //{ title: "Features", data: "SFeature", defaultContent: "" },
        //{ title: "Dev1", data: "Dev1", defaultContent: "" },
        //{ title: "Dev2", data: "Dev2", defaultContent: "" },
        //{ title: "Dev3", data: "Dev3", defaultContent: "" },
        //{ title: "Dev4", data: "Dev4", defaultContent: "" },
        //{ title: "Dev5", data: "Dev5", defaultContent: "" },
        //{ title: "Dev6", data: "Dev6", defaultContent: "" },
        //{ title: "Dev7", data: "Dev7", defaultContent: "" },
        //{ title: "Dev8", data: "Dev8", defaultContent: "" },
        //{ title: "Dev9", data: "Dev9", defaultContent: "" },
        //{ title: "Dev10", data: "Dev10", defaultContent: "" },
        //{ title: "QA1", data: "QA1", defaultContent: "" },
        //{ title: "QA2", data: "QA2", defaultContent: "" },
        //{ title: "QA3", data: "QA3", defaultContent: "" },
        //{ title: "QA4", data: "QA4", defaultContent: "" },
        //{ title: "QA5", data: "QA5", defaultContent: "" },
        //{ title: "SA1", data: "SA1", defaultContent: "" },
        //{ title: "SA2", data: "SA2", defaultContent: "" },
        //{ title: "SA3", data: "SA3", defaultContent: "" },
        //{ title: "SA4", data: "SA4", defaultContent: "" },
        //{ title: "SA5", data: "SA5", defaultContent: "" },
    ];

    async function getMembersTeam(team) {
        return new Promise((resolve, reject) => {
            fetch(`${team}`)
                .then((lst) => {
                    let lstRes = [];
                    for (let mem of lst.value)
                        lstRes.push(mem.identity.displayName);
                    resolve(lstRes);
                });
        });
    }

    async function getData() {
        let lstQryRes = await fetch(`${releaseReportURl}`);
        let lstWIds = lstQryRes.workItemRelations.map(o => o.target.id);
        let lstWI = await fetch(`${witBaseUrl}&ids=${lstWIds.slice(0, 200).toString()}&$expand=relations`);
        
        let lstWI2 = await fetch(`${witBaseUrl}&ids=${lstWIds.slice(200, 400).toString()}&$expand=relations`);
        let lstWI3 = await fetch(`${witBaseUrl}&ids=${lstWIds.slice(400, 600).toString()}&$expand=relations`);
        let lstWI4 = await fetch(`${witBaseUrl}&ids=${lstWIds.slice(600, 800).toString()}&$expand=relations`);
        
        lstWI = lstWI.value;
        if(lstWI2 !== undefined)
            lstWI = [...lstWI, ...lstWI2.value];
        if(lstWI3 !== undefined)
            lstWI = [...lstWI, ...lstWI3.value];
        if(lstWI4 !== undefined)
            lstWI = [...lstWI, ...lstWI4.value];

        console.log(lstWI);

        lstDevTeam = await getMembersTeam(teamBaseUrl);
        //lstQATeam = await getMembersTeam(teamQABaseUrl);
        //lstSATeam = await getMembersTeam(teamSABaseUrl);

        let lstRows = lstWI.map(function (item) {
            return wiMapper(item);
        });
        
        //console.log(lstRows);
        
        let t = 0;
        let topDev = 0;
        let topQA = 0;
        let lstRowsAux = [...lstRows];

        for(let x=1;x<lstRows.length;x++){
            if(lstRows[x].Type == "Epic" || x == lstRows.length - 1){
        
                let lstEpicRows = lstRowsAux.splice(0, x-t);
                //console.table(lstEpicRows);
                
                //Start
                let lstDev = [];
                let cdev = 1;
                let DevLOE = 0;

                let lstQA = [];
                let cqa = 1;
                let QALOE = 0;
                
                let lstSA = [];
                let csa = 1;

                lstEpicRows.map(function (item) {

                    if(item.Type === 'Feature'){
                        console.log(item);
                        
                        //##### SA DATA ##### 
                        
                        if(lstSA.indexOf(item.AssignedTo) < 0){
                            lstSA.push(item.AssignedTo);
                            lstRows[t][`SA${csa}`] = item.AssignedTo;
                            csa++;
                        }

                        if(item.SAStart !== undefined && (item.SAStart < lstRows[t].SAStart || lstRows[t].SAStart === ""))
                            lstRows[t].SAStart = item.SAStart;
                        if(item.SAEnd !== undefined && (item.SAEnd > lstRows[t].SAEnd || lstRows[t].SAEnd === ""))
                            lstRows[t].SAEnd = item.SAEnd;
                        
                        let SFeature = " " + item.Id + " " + item.Title;
                        lstRows[t].SFeature = lstRows[t].SFeature === undefined ? SFeature : lstRows[t].SFeature + "</br>" + SFeature;
                    }

                    if(item.Type === 'User Story'){
                        
                        //##### DEV DATA ##### 
                        
                        DevLOE += item.DevLOE;

                        if(item.AssignedTo !== ''){
                            if(lstDevTeam.indexOf(item.AssignedTo) > 0 && lstDev.indexOf(item.AssignedTo) < 0){
                                lstDev.push(item.AssignedTo);
                                lstRows[t][`Dev${cdev}`] = item.AssignedTo;
                                cdev++;
                            }
                        }
                        if(item.DevStart !== undefined && (item.DevStart < lstRows[t].DevStart || lstRows[t].DevStart === ""))
                            lstRows[t].DevStart = item.DevStart;
                        if(item.DevEnd !== undefined && (item.DevEnd > lstRows[t].DevEnd  || lstRows[t].DevEnd === ""))
                            lstRows[t].DevEnd = item.DevEnd;
                        
                        //##### QA DATA ##### 
                        
                        QALOE += item.QALOE;

                        if(item.QA !== ''){
                            if(lstQA.indexOf(item.QA) < 0){
                                lstQA.push(item.QA);
                                lstRows[t][`QA${cqa}`] = item.QA;
                                cqa++;
                            }
                        }

                        if(item.QAStart !== undefined && (item.QAStart < lstRows[t].QAStart  || lstRows[t].QAStart === ""))
                            lstRows[t].QAStart = item.QAStart;
                        if(item.QAEnd !== undefined && (item.QAEnd > lstRows[t].QAEnd || lstRows[t].QAEnd === ""))
                            lstRows[t].QAEnd = item.QAEnd;

                        
                    }
                });

                lstRows[t].Dev = lstDev.toString();
                lstRows[t].QA = lstQA.toString();
                lstRows[t].SA = lstSA.toString();

                lstRows[t].DevLOE = DevLOE;
                lstRows[t].QALOE = QALOE;

                t = x;
            }
        }
        //console.table(lstRows);
        lstRows = lstRows.filter(wi => wi.Type == "Epic");
        return lstRows ;
    }

    function wiMapper(item) {
        return {
            Id: item.id,
            Title: item.fields['System.Title'],
            //State: item.fields['System.State'],
            Type: item.fields['System.WorkItemType'],
            Project: item.fields['Custom.ChangePointProject#'],
            TargetedReleaseDate: item.fields['Custom.TargetedReleaseDate'],
            Description: item.fields['System.Description'],
            PM: item.fields['Custom.ProjectManager'] === undefined ? '' : item.fields['Custom.ProjectManager'].displayName,
            AssignedTo: item.fields['System.AssignedTo'] === undefined ? '' : item.fields['System.AssignedTo'].displayName,
            QA: item.fields['Custom.QAResource'] === undefined ? '' : item.fields['Custom.QAResource'].displayName,
            HLOE: item.fields['Microsoft.VSTS.Scheduling.Effort'],
            ViaOneProduct: 'Smart.ly',
            RequestStatus: item.fields['System.State'],
            
            //Dev
            DevLOE: item.fields['Custom.LOE'] === undefined ? 0 : item.fields['Custom.LOE'],
            DevStart: item.fields['System.WorkItemType'] === 'User Story' ? item.fields['Custom.DevStartDate'] : '',
            DevEnd: item.fields['System.WorkItemType'] === 'User Story' ? item.fields['Custom.DevEndDate'] : '',
            
            //QA
            QALOE: item.fields['Custom.QALOE'] === undefined ? 0 : item.fields['Custom.QALOE'],
            QAStart: item.fields['System.WorkItemType'] === 'User Story' ? item.fields['Custom.QAStartDate'] : '',
            QAEnd: item.fields['System.WorkItemType'] === 'User Story' ? item.fields['Custom.QAEndDate'] : '',
            
            //SA
            SAStart: item.fields['System.WorkItemType'] === 'Feature' ? item.fields['Microsoft.VSTS.Scheduling.StartDate'] : '',
            SAEnd: item.fields['System.WorkItemType'] === 'Feature' ? item.fields['Microsoft.VSTS.Scheduling.TargetDate'] : ''
        };
    }

     function renderTable(cols) {
        $table = $("#pr-report").DataTable({
            pageLength: 1000,
            ordering: false,
            select: true,
            dom: 'Bfrtip',
            buttons: [{
                extend: 'excelHtml5',
                title: 'Epics',
            }],
            columns: cols,
        });
    }

     function populate(lst) {
        $table.clear().rows.add(lst).draw();
        $(".table").removeClass("invisible").addClass("visible");
        $(".state").removeClass("visible").addClass("invisible").hide();
        $(".tt").tooltip();
        $("body").resize()
    }

    $(document).ready(function () {
        getData().then((lst) => {
            renderTable(lstCols);
            lstTable = lst;
            populate(lst);
        });

        customize();
    });
</script>
<div class="card-box widget  vh90">
    <div class="row">
        <div class="col-md-6">
            <div class="state visible pull-left"><i class="fa fa-clock-o"></i> <span class="state-text">Loading...</span></div>
        </div>
    </div>
    <div class="table invisible">
        <table id="pr-report" class="display table table-bordered dataTable no-footer compact nowrap responsive" width="100%"></table>
    </div>
</div>
