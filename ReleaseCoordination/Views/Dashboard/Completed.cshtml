@{
    ViewData["Title"] = "Completed Pull Request";
}

<script>
    const isWidget = ('@ViewBag.IsWidget' === 'True');
    let $table;

    function getPullRequest() {
        return new Promise((resolve, reject) => {
            let data = [];
            fetch(`${gitBaseUrl}pullrequests?searchCriteria.status=completed&$skip=0&$top=500`)
                .then((lstPR) => {
                    let s = lstPR.value.length - 1;
                    for (let pr of lstPR.value) {
                        fetch(`${gitBaseUrl}repositories/${pr.repository.id}/pullRequests/${pr.pullRequestId}/workitems`)
                            .then((lstWI) => {
                                let row = {};
                                row.pullRequestId = pr.pullRequestId;
                                row.targetBranch = pr.targetRefName;
                                row.createdBy = pr.createdBy.displayName;
                                row.title = pr.title;
                                row.repo = pr.repository.name;
                                if (lstWI !== undefined) {
                                    for (let widet of lstWI.value) {
                                        let rowWI = Object.assign({}, row)
                                        rowWI.workItemId = widet.id;
                                        data.push(rowWI);
                                    }
                                }
                                else
                                    data.push(row);

                                if ((s--) == 0)
                                    resolve(data);
                            });
                    }
                });
        });
    }

    function getPullRequestWorkItems(lstPR) {
        return new Promise((resolve, reject) => {
            let workItemsId = [];
            lstPR.forEach(pr => {
                if (pr.workItemId !== undefined)
                    workItemsId.push(pr.workItemId);
            });

            let n = Math.ceil(workItemsId.length / 200) - 1;
            while (workItemsId.length > 0) {
                fetch(`${witBaseUrl}&ids=${workItemsId.splice(0, 200).toString()}`).then((lstWI) => {
                    lstPR.forEach(pr => {
                        let lstWIF = lstWI.value.filter(wi => wi.id == pr.workItemId);
                        if (lstWIF.length > 0) {
                            pr.iterationPath = lstWIF[0].fields["System.IterationPath"];
                            pr.requestedReleaseDate = lstWIF[0].fields["Custom.RequestedReleaseDate"];
                            pr.targetedReleaseDate = lstWIF[0].fields["Custom.TargetedReleaseDate"];
                            pr.confirmedReleaseDate = lstWIF[0].fields["Custom.ConfirmedReleaseDate"];
                            pr.releaseDate = lstWIF[0].fields["Custom.ReleaseDate"];
                            pr.workItemTitle = lstWIF[0].fields["System.Title"];
                            pr.workItemState = lstWIF[0].fields["System.State"];
                        }
                    });

                    if ((n--) === 0)
                        resolve(lstPR);
                });
            }
        });
    }

    function getPullRequestBuilds(lstPR) {
        return new Promise((resolve, reject) => {
            $(".state").removeClass("invisible").addClass("visible");
            let lst = localStorage.getItem("lstBuild") == null ? [] : JSON.parse(localStorage.getItem("lstBuild"));
            let stop = localStorage.getItem("lastBuildId") == null ? '' : '&$top=100';
            let lastBuildId = localStorage.getItem("lastBuildId") == null ? 0 : localStorage.getItem("lastBuildId");

            fetch(`${buildBaseUrl}?api-version=6.0&queryOrder=finishTimeDescending${stop}`).then((lstBuild) => {

                let top = lastBuildId === 0 ? lstBuild.value.length + 1 : 1;
                let firstBuildId = lstBuild.value[0].id;
                while (lastBuildId != 0 && top < lstBuild.value.length && firstBuildId != lastBuildId) {
                    firstBuildId = lstBuild.value[top].id;
                    top++;
                }

                getBuildWorkItems(lstBuild.value.slice(0, top - 1), lst).then(lst => {
                    localStorage.setItem("lastBuildId", lstBuild.value[0].id);
                    localStorage.setItem("lstBuild", JSON.stringify(lst));

                    lstPR.forEach(pr => {
                        let lstWIF = lst.filter(wi => wi.workItemId == pr.workItemId && wi.sourceBranch == pr.targetBranch);
                        lstWIF.forEach(wi => {
                            pr.buildNumber = pr.buildNumber === undefined ? wi.buildNumber : pr.buildNumber + ' ' + wi.buildNumber
                            pr.buildId = pr.buildId === undefined ? wi.buildId.toString() : pr.buildId + ' ' + wi.buildId
                        });
                    });

                    resolve(lstPR);
                });
            });
        });
    }

    function getBuildWorkItems(lstBuild, lst) {
        return new Promise((resolve, reject) => {
            if (lstBuild.length == 0) {
                resolve(lst);
                return;
            }

            let c = 0;
            for (let x = 0; x < lstBuild.length; x++) {
                let build = lstBuild[x];

                fetch(`${buildBaseUrl}/${build.id}/workitems?api-version=6.0`).then((lstWI) => {
                    lstWI.value.forEach(wi => {
                        lst.push({ buildId: build.id, buildNumber: build.buildNumber, workItemId: wi.id, sourceBranch: build.sourceBranch });
                    });

                    if ((c++) == (lstBuild.length - 1))
                        resolve(lst);
                });
            }
        });
    }

    function getBranchCommits(lstPR) {
        return new Promise((resolve, reject) => {
            //let solve = 0;
            //for (let x = 0; x < 10; x++) {
            fetch(`${gitBaseUrl}repositories/${repoId}/commits?searchCriteria.itemVersion.version=release&searchCriteria.$skip=0&searchCriteria.$top=1000&api-version=6.0`)
                    .then((lstRelease) => {
                        for (let pr of lstPR) {
                            let commit = lstRelease.value.filter(wi => wi.comment.trim().indexOf(pr.title.trim()) > 0);
                            pr.releaseCommit = commit.length > 0 ? commit[0].commitId : '';
                        }
                        //solve++;
                        //if (solve == 10)
                            resolve(lstPR);
                    });
            //}
        });
    }

    function renderTable() {
        $table = $("#pr-report").DataTable({
            pageLength: 100,
            dom: 'Bfrtip',
            order: [[10, "desc"]],
            buttons: [{
                extend: 'excelHtml5',
                title: 'PullRequest',
            }],
            columns: [
                {
                    title: "PR Id", data: "pullRequestId", responsivePriority: 1, className: "dt-body-center",
                    render: function (value, meta, row) {
                        return value == null ? '' : `<a href='${prBaseUrl}${row.repo}/pullrequest/${value}' target='_blank'> ${value} </a>`
                    }
                },
                { title: "Target Branch", data: "targetBranch", responsivePriority: 3, render: function (value) { return value.substring(value.lastIndexOf('/'), value.length) } },
                { title: "Created By", data: "createdBy" },
                { title: "PR Title", data: "title", width: "25%", responsivePriority: 2 },
                {
                    title: "WI Id", data: "workItemId", className: "dt-body-center", responsivePriority: 5,
                    render: function (value) {
                        return value == null ? '' : `<a href='${wiBaseUrl}${value}' target='_blank'> ${value} </a>`
                    }
                },
                { title: "WI Title", data: "workItemTitle", defaultContent: "", width: "25%", responsivePriority: 6 },
                { title: "WI Status", data: "workItemState", defaultContent: "", responsivePriority: 7 },
                { title: "Requested Release", data: "requestedReleaseDate", responsivePriority: 10, render: function (value) { return value == null ? '' : moment(value).format('MM/D/YYYY'); } },
                { title: "Targeted Release", data: "targetedReleaseDate", responsivePriority: 11, render: function (value) { return value == null ? '' : moment(value).format('MM/D/YYYY'); } },
                { title: "Confirmed Release", data: "confirmedReleaseDate", responsivePriority: 12, render: function (value) { return value == null ? '' : moment(value).format('MM/D/YYYY'); } },
                { title: "Release Date", data: "releaseDate", responsivePriority: 4, render: function (value) { return value == null ? '' : moment(value).format('MM/D/YYYY'); } },
                {
                    title: "Build Number", data: "buildNumber", responsivePriority: 8,
                    render: function (value, type, row) {
                        let html = '';
                        if (row.buildNumber !== undefined) {
                            let sBuildNumber = row.buildNumber.split(' ');
                            let sBuildId = row.buildId.split(' ');

                            for (let x = 0; x < sBuildId.length; x++)
                                html += `<a href='${buildResultUrl}${sBuildId[x]}' target='_blank'> ${sBuildNumber[x]} </a>`;
                        }
                        return html;
                    }
                },
                {
                    title: "Release Commit", data: "releaseCommit", defaultContent: "", responsivePriority: 9,
                    render: function (value, type, row) {
                        return value === undefined || value === '' ? '' : `<a href='${commitBaseUrl}${value}?refName=refs%2Fheads%2Frelease' target='_blank'> ${value.substring(0, 5)} ... </a>`;
                    }
                },
            ],
        });
    }

    $(document).ready(function () {
        customize();
        getPullRequest().then((lstPR) => {
            getPullRequestWorkItems(lstPR).then((lstPR) => {

                $(".table").removeClass("invisible").addClass("visible");
                $(".state-text").text("Loading Builds...");
                $table.clear().rows.add(lstPR).draw();

                getPullRequestBuilds(lstPR).then((lstPR) => {
                    $(".state").removeClass("visible").addClass("invisible").hide();
                    $table.clear().rows.add(lstPR).draw();

                    $(".state-text").text("Loading Commit in release...");
                    getBranchCommits(lstPR).then((lstPR) => {
                        $table.clear().rows.add(lstPR).draw();
                    });
                });
                $("body").resize();
                $(".branch").val("master").change();
            });
        });
        renderTable();
        $(".tt").tooltip();
        $(".filter").change(function () {
            $table.column($(this).attr("filter-index")).search(this.value).draw();
        });
    });
</script>
<div class="card-box widget">
    <div class="row">
        <div class="col-md-5">
            <a class="table invisible collapsed" data-toggle="collapse" href="#collapse"><i class="fa fa-filter"></i>Filters</a>
        </div>
        <div class="col-md-6">
            <div class="state visible pull-left"><i class="fa fa-clock-o"></i> <span class="state-text">Loading...</span></div>
            @*<div class="pull-left table invisible"><span data-toggle="tooltip" data-placement="bottom" title="updated @(ViewBag.UpdatedDate)" class="tt current-release badge badge-primary">Current release: @ViewBag.CurrentRelease.ToString("MM/dd/yyyy") @(ViewBag.IsOffCycle?"- OffCycle":"") </span></div>*@
        </div>
        <div class="col-md-1">
            <div class="table invisible is-widget"><a class="table invisible tt" href="@(ViewBag.Host)dashboard/completed" target='_blank'><i data-toggle="tooltip" data-placement="left" title="expand" class="pull-right fa fa-external-link"></i></a></div>
        </div>
    </div>
    <div id="collapse" class="row collapse">
        <div class="col-md-12">
            <form class="form-inline table invisible" role="form">
                <div class="form-group m-l-5 m-t-5">
                    <input type="text" class="branch form-control filter input-sm" filter-index="1" placeholder="Branch">
                </div>
                <div class="form-group m-l-5 m-t-5">
                    <input type="text" class="form-control filter input-sm" filter-index="7" placeholder="Requested release date">
                </div>
                <div class="form-group m-l-5 m-t-5">
                    <input type="text" class="form-control filter input-sm" filter-index="8" placeholder="Targeted release date">
                </div>
                <div class="form-group m-l-5 m-t-5">
                    <input type="text" class="form-control filter input-sm" filter-index="9" placeholder="Confirmed release date">
                </div>
                <div class="form-group m-l-5 m-t-5">
                    <input type="text" class="release-date form-control filter input-sm" filter-index="10" placeholder="Release date">
                </div>
            </form>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 table invisible ">
            <table id="pr-report" class="display table table-striped table-bordered dataTable no-footer responsive compact" width="100%"></table>
        </div>
    </div>
</div>
